services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - data-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - data-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafka-setup:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-setup
    depends_on:
      - kafka
    networks:
      - data-network
    command: >
      bash -c " echo 'Waiting for Kafka to be ready...' && cub kafka-ready -b kafka:29092 1 60 && echo 'Kafka is ready!' && kafka-topics --create --topic gdelt_events --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 && kafka-topics --create --topic wiki_events --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 && echo 'Topics created successfully!' "

  minio:
    image: minio/minio:RELEASE.2024-07-29T22-14-52Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - data-network
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: minio server /data --console-address ":9001"
    volumes:
      - minio-data:/data

  mc:
    image: minio/mc
    container_name: mc
    networks:
      - data-network
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c " sleep 10; mc alias set myminio http://minio:9000 minioadmin minioadmin && mc mb myminio/my-bucket; exit 0; "

  spark-master:
    #image: apache/spark:3.5.0
    build:
      context: ./spark-base
    container_name: spark-master
    command: master
    user: root # 나중에 배포할때 수정
    depends_on:
      - minio
      - kafka
      - kafka-setup
    ports:
      - "8081:8080"
      - "7077:7077"
    networks:
      - data-network
    volumes:
      - .:/app
      - ./spark-ivy-cache:/home/spark/.ivy2
      - spark-jars:/opt/spark/jars
    environment:
      - SPARK_LOCAL_DIRS=/tmp

  spark-worker:
    #image: apache/spark:3.5.0
    build:
      context: ./spark-base
    container_name: spark-worker
    command: worker spark://spark-master:7077
    user: root # 나중에 배포할때 수정
    networks:
      - data-network
    depends_on:
      - spark-master # Master가 먼저 실행되도록 의존성 설정
      - kafka-setup
    volumes:
      - .:/app
      - ./spark-ivy-cache:/home/spark/.ivy2
    environment:
      - SPARK_LOCAL_DIRS=/tmp

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - data-network

  airflow-init:
    #image: apache/airflow:2.9.2
    build:
      context: ./airflow
    container_name: airflow-init
    networks:
      - data-network
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: bash -c "airflow db init && airflow users create --username airflow --firstname admin --lastname admin --role Admin --email admin@example.com --password airflow"

  airflow-webserver:
    #image: apache/airflow:2.9.2-python3.10
    build:
      context: ./airflow
    container_name: airflow-webserver
    depends_on:
      - airflow-init
      - kafka-setup
    ports:
      - "8082:8080" # <--- Spark와 충돌하지 않도록 8082 포트 사용
    networks:
      - data-network
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=your_secret_key_here
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/ariflow/src
      - ./config:/opt/airflow/config
      - ./.secrets:/opt/airflow/.secrets
      - ./.env:/opt/airflow/.env
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      # Docker 소켓 연결 통로 추가
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/app
    command: webserver

  airflow-scheduler:
    #image: apache/airflow:2.9.2-python3.10
    build:
      context: ./airflow
    container_name: airflow-scheduler
    networks:
      - data-network
    depends_on:
      - airflow-init
      - kafka-setup
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./config:/opt/airflow/config
      - ./.secrets:/opt/airflow/.secrets
      - ./.env:/opt/airflow/.env
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      # -Docker 소켓 연결 통로 추가
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/app
    command: scheduler

  jupyter-lab:
    build: .
    container_name: jupyter-lab
    depends_on:
      - spark-master
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - spark-jars:/opt/spark/jars
    networks:
      - data-network

volumes:
  minio-data:
  spark-jars:


networks:
  data-network:
    driver: bridge
