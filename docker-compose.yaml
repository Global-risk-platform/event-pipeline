services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  
  producer:
    build: ./producer
    container_name: producer
    depends_on:
      - kafka
    environment:
      PYTHONUNBUFFERED: 1
    volumes:
      - ./producer:/app
    working_dir: /app
    command: python producer.py
  
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: minio server /data --console-address ":9001"

  spark-master:
    image: apache/spark:3.5.0
    container_name: spark-master
    user: root
    depends_on:
      - minio
      - kafka
    ports:
      - "8081:8080"
      - "7077:7077"
    command: /opt/entrypoint.sh /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
    volumes:
      - .:/app
      - ./spark-ivy-cache:/home/spark/.ivy2
    environment:
      - SPARK_LOCAL_DIRS=/tmp
    
  spark-worker: # 새로운 'spark-worker' 서비스 추가
    image: apache/spark:3.5.0
    container_name: spark-worker
    user: root
    depends_on:
      - spark-master # Master가 먼저 실행되도록 의존성 설정
    command: /opt/entrypoint.sh /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    volumes:
      - .:/app
      - ./spark-ivy-cache:/home/spark/.ivy2
    environment:
      - SPARK_LOCAL_DIRS=/tmp
  
  # --- 아래부터 Airflow 관련 서비스 추가 ---

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  airflow-init:
    image: apache/airflow:2.9.2
    container_name: airflow-init
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: bash -c "airflow db init && airflow users create --username airflow --firstname admin --lastname admin --role Admin --email admin@example.com --password airflow"

  airflow-webserver:
    # image: apache/airflow:2.9.2
    build: .
    container_name: airflow-webserver
    depends_on:
      - airflow-init
    ports:
      - "8082:8080" # <--- Spark와 충돌하지 않도록 8082 포트 사용
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=your_secret_key_here
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      # --- [핵심 수정] Docker 소켓 연결 통로 추가! ---
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/app
    command: webserver

  airflow-scheduler:
    #image: apache/airflow:2.9.2
    build: .
    container_name: airflow-scheduler
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      # --- [핵심 수정] Docker 소켓 연결 통로 추가! ---
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/app
    command: scheduler